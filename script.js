// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 5)
const servers = [
    { name: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", code: "AUTO" },
    { name: "–°–®–ê", code: "US" },
    { name: "–ì–µ—Ä–º–∞–Ω–∏—è", code: "DE" },
    { name: "–Ø–ø–æ–Ω–∏—è", code: "JP" },
    { name: "–†–æ—Å—Å–∏—è", code: "RU" }
];

// URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
const SUBSCRIPTION_END_URL = "https://telegra.ph/Uvazhaemyj-polzovatel-08-04";

// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const screens = document.querySelectorAll('.screen');
const navItems = document.querySelectorAll('.nav-item');
const connectionButton = document.getElementById('connectionButton');
const mainStatusText = document.getElementById('mainStatusText');
const currentLocationText = document.getElementById('currentLocationText');
const serverList = document.getElementById('serverList');
const searchBar = document.getElementById('searchBar');
const receivedDataEl = document.getElementById('receivedData');
const sentDataEl = document.getElementById('sentData');
const subscriptionDaysEl = document.getElementById('subscriptionDays');
const subscriptionEndedText = document.getElementById('subscriptionEndedText');

let isConnected = false;
let selectedLocation = servers[0]; // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let trafficInterval;
let receivedBytes = 0;
let sentBytes = 0;

// –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤
function showScreen(screenId) {
    screens.forEach(screen => screen.classList.remove('active'));
    document.getElementById(screenId).classList.add('active');
    
    navItems.forEach(item => {
        item.classList.toggle('active', item.dataset.screen === screenId);
    });
}

navItems.forEach(item => {
    item.addEventListener('click', (e) => {
        e.preventDefault();
        showScreen(e.currentTarget.dataset.screen);
    });
});

// –õ–æ–≥–∏–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –∏ —Ç—Ä–∞—Ñ–∏–∫–∞
connectionButton.addEventListener('click', () => {
    const daysLeft = calculateDaysLeft();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
    if (daysLeft <= 0) {
        window.open(SUBSCRIPTION_END_URL, '_blank');
        return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    }
    
    isConnected = !isConnected;
    connectionButton.classList.toggle('connected', isConnected);
    connectionButton.classList.toggle('disconnected', !isConnected);
    updateMainScreen();

    if (isConnected) {
        // –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Ç—Ä–∞—Ñ–∏–∫–∞
        trafficInterval = setInterval(updateTraffic, 1000);
    } else {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        clearInterval(trafficInterval);
        receivedBytes = 0;
        sentBytes = 0;
        receivedDataEl.textContent = '0 B';
        sentDataEl.textContent = '0 B';
    }
});

function updateMainScreen() {
    const daysLeft = calculateDaysLeft();
    
    if (daysLeft <= 0) {
        mainStatusText.textContent = '–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å';
        subscriptionDaysEl.textContent = '0';
        connectionButton.classList.add('disabled');
        subscriptionEndedText.style.display = 'block';
    } else {
        mainStatusText.textContent = isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ';
        subscriptionDaysEl.textContent = daysLeft;
        connectionButton.classList.remove('disabled');
        subscriptionEndedText.style.display = 'none';
    }
    
    const status = isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫' : '–í—ã–±—Ä–∞–Ω–æ';
    currentLocationText.innerHTML = `${status}: <strong>${selectedLocation.name}</strong>`;
}

function formatBytes(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function updateTraffic() {
    // –°–∏–º—É–ª—è—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç
    receivedBytes += Math.random() * 1024 * 500; // –¥–æ 500 –ö–ë/—Å
    sentBytes += Math.random() * 1024 * 50;   // –¥–æ 50 –ö–ë/—Å
    receivedDataEl.textContent = formatBytes(receivedBytes);
    sentDataEl.textContent = formatBytes(sentBytes);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
function calculateDaysLeft() {
    const firstLoginDate = localStorage.getItem('firstLoginDate');
    if (!firstLoginDate) {
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        const now = new Date();
        localStorage.setItem('firstLoginDate', now.toISOString());
        return 7;
    }
    
    const firstDate = new Date(firstLoginDate);
    const now = new Date();
    const diffTime = now - firstDate;
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    const daysLeft = 7 - diffDays;
    
    return daysLeft > 0 ? daysLeft : 0;
}

// –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –ø–æ–∏—Å–∫–∞
function getFlagEmoji(countryCode) {
    if (countryCode === "AUTO") return '‚ú®';
    if (countryCode === "XK") return 'üáΩüá∞'; // –ö–æ—Å–æ–≤–æ
    
    const codePoints = countryCode
        .toUpperCase()
        .split('')
        .map(char => 127397 + char.charCodeAt());
    return String.fromCodePoint(...codePoints);
}

function renderServerList(filter = '') {
    serverList.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
    const filteredServers = servers.filter(server => 
        server.name.toLowerCase().includes(filter.toLowerCase())
    );

    filteredServers.forEach(server => {
        const item = document.createElement('li');
        item.className = 'server-item';
        item.dataset.locationCode = server.code;
        
        if (server.code === selectedLocation.code) {
            item.classList.add('selected');
        }

        item.innerHTML = `
            <div class="server-item-left">
                <span class="flag">${getFlagEmoji(server.code)}</span>
                <span class="location-name">${server.name}</span>
            </div>
            <div class="server-item-right">
                <i class="fas fa-check-circle check-icon"></i>
            </div>
        `;

        item.addEventListener('click', () => {
            selectedLocation = server;
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä
            renderServerList(searchBar.value);
            updateMainScreen();
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
            setTimeout(() => showScreen('mainScreen'), 200);
        });

        serverList.appendChild(item);
    });
}

searchBar.addEventListener('input', (e) => {
    renderServerList(e.target.value);
});

// –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
    const darkThemeToggle = document.getElementById('darkThemeToggle');
    const privacyPolicyBtn = document.getElementById('privacyPolicyBtn');
    const helpSupportBtn = document.getElementById('helpSupportBtn');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
    if (localStorage.getItem('theme') === 'light') {
        document.body.classList.add('light-theme');
        darkThemeToggle.checked = true;
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
    darkThemeToggle.addEventListener('change', function() {
        if (this.checked) {
            document.body.classList.add('light-theme');
            localStorage.setItem('theme', 'light');
        } else {
            document.body.classList.remove('light-theme');
            localStorage.setItem('theme', 'dark');
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    privacyPolicyBtn.addEventListener('click', function() {
        window.open('https://telegra.ph/POLZOVATELSKOE-SOGLASHENIE-DinoVPN-08-04', '_blank');
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    helpSupportBtn.addEventListener('click', function() {
        window.open('https://t.me/dinovpnhelp', '_blank');
    });
    
    // –õ–æ–≥–∏–∫–∞ –¥—Ä—É–≥–∏—Ö –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
    const switches = document.querySelectorAll('.switch input:not(#darkThemeToggle)');
    switches.forEach(sw => {
        sw.addEventListener('change', function() {
            const settingName = this.parentElement.previousElementSibling.textContent;
            console.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ "${settingName}" –∏–∑–º–µ–Ω–µ–Ω–∞: ${this.checked}`);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
        });
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    renderServerList();
    updateMainScreen();
});